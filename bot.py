"""
Boilerplate taken from
https://realpython.com/how-to-make-a-discord-bot-python/#what-is-a-bot
"""

import os
from dotenv import load_dotenv

load_dotenv()
D_TOKEN = os.getenv("DISCORD_TOKEN")

from collections import deque

import discord
from discord.ext import commands

import youtube_dl
import asyncio

"""
Streaming from Youtube using Youtube DL modified from
https://github.com/Rapptz/discord.py/blob/master/examples/basic_voice.py
"""
ytdl_format_options = {
    "format": "bestaudio/best",
    "outtmpl": "%(extractor)s-%(id)s-%(title)s.%(ext)s",
    "restrictfilenames": True,
    "noplaylist": True,
    "nocheckcertificate": True,
    "ignoreerrors": False,
    "logtostderr": False,
    "quiet": True,
    "no_warnings": True,
    "default_search": "auto",
    "source_address": "0.0.0.0" # bind to ipv4 since ipv6 addresses cause issues sometimes
}
ffmpeg_options = {
    "options": "-vn"
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)
class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)

        self.data = data
        self.title = data.get("title")
        self.url = data.get("url")

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=True):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None,
                                          lambda: ytdl.extract_info(url,
                                                                    download = not stream))

        if "entries" in data:
            # take first item from a playlist
            data = data["entries"][0]

        filename = data["url"] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options),
                   data=data)

COM_PREFIX = "-"
bot = commands.Bot(command_prefix=COM_PREFIX)

@bot.event
async def on_ready():
    print(f"{bot.user} has connected to Discord!")

async def stream(context, url):
    async with context.typing():
        player = await YTDLSource.from_url(url, loop=bot.loop, stream=True)
        context.voice_client.play(player,
                                  after=lambda e: print(f"Player error: {e}") if e else None)
    
    await context.send(f"Now playing: {player.title}")

@bot.command(name="play")
async def play(context, *args):
    if not args:
        # No URLs were passed as arguments
        if context.voice_client.is_paused():
            context.voice_client.resume()
    else:
        await stream(context, args[0])

@play.before_invoke
async def join_channel(context):
    message = context.message
    if (message.webhook_id):
        # Message generated by a webhook and not a valid user.
        return
    # Message was sent by a valid user.
    
    user = message.author
    voice_state = user.voice
    
    # Bot will join the user's voice channel, if possible
    if (not voice_state):
        # User was not in a voice channel
        await context.send("User must be in a voice channel.")
        return
    else:
        # Joins the voice channel if not already in it
        channel = voice_state.channel
        user_voice_channel_id = voice_state.channel.id
        if (context.voice_client is None):
            # Move to sender's voice channel from no voice channel
            await channel.connect()
        elif (context.voice_client.channel.id != user_voice_channel_id):
            # Move to the sender's voice channel from another voice channel
            await context.voice_client.disconnect()
            await channel.connect()
        # Otherwise, bot is already in the same voice channel as the sender

@bot.command(name="stop")
async def stop(context):
    if (context.voice_client is None):
        # Bot is not playing in a voice channel
        await context.send("I'm not playing anything right now!")
        return

    await context.voice_client.disconnect()

@bot.command(name="pause")
async def pause(context):
    if (context.voice_client.is_playing()):
        context.voice_client.pause()
    
    
bot.run(D_TOKEN)